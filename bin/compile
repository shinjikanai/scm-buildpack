#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# set -e # fail fast
set -o pipefail

BUILD_DIR=$1
CACHE_DIR=$2

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

if [ "${SCM_URL}X" == "X" ]; then
  echo "=====> SCM_URL is not set, exiting"
  sleep 2
  exit 1
fi

echo "=====> SCM_URL is $SCM_URL"

# temp location in case we need it for archive downloads
TEMPDIR=$(mktemp -t buildpackXXXXX)
rm -rf $TEMPDIR
mkdir -p $TEMPDIR

SCM_DIR=$CACHE_DIR/scm

if [[ "$SCM_URL" =~ \.(tgz|tar\.gz)$ ]]; then
  echo "=====> Downloading tgz archive: $SCM_URL"
  curl -k -s $SCM_URL | tar xvz -C $TEMPDIR  >/dev/null 2>&1
  cp -R $TEMPDIR/* $BUILD_DIR/
elif [[ "$SCM_URL" =~ \.(zip|war)$ ]]; then
  echo "=====> Downloading zip archive: $SCM_URL"
  TEMPFILE=$(mktemp -t tempXXXXX)
  curl -k -o $TEMPFILE $SCM_URL >/dev/null 2>&1
  unzip $TEMPFILE -d $TEMPDIR  >/dev/null 2>&1
  rm $TEMPFILE
  cp -R $TEMPDIR/* $BUILD_DIR/
elif [[ "$SCM_URL" =~ \.(git)$ ]]; then
  SCM_BRANCH=${SCM_BRANCH:-master}
  echo "=====> SCM_BRANCH is $SCM_BRANCH"
  if [[ -d $SCM_DIR/.git ]]; then
    echo "=====> Fetching changes for existing repo"
    cd $SCM_DIR
    git fetch origin | indent
    git checkout origin/$SCM_BRANCH >/dev/null 2>&1
  else
    echo "=====> Cloning remote git repository"
    git clone $SCM_URL $SCM_DIR | indent
  fi
  cp -R $SCM_DIR/* $BUILD_DIR/
  rm -rf $BUILD_DIR/.git
else
  echo "! \$SCM_URL $SCM_URL was not detected as a tgz, zip or git" | indent
  exit 1
fi

echo "=====> build dir listing"
ls -al $BUILD_DIR | indent

# vendor directories
VENDORED_OPENRESTY="${BUILD_DIR}/vendor/openresty"
VENDORED_FOREGO="${BUILD_DIR}/vendor/bin/forego"
VENDORED_GEMS="${BUILD_DIR}/vendor/gems"
echo "installing ruby sinatra"
GEM_HOME=$VENDORED_GEMS gem install sinatra --no-ri --no-rdoc
